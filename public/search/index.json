[{"content":"python基础课 序列中有关于字符串，列表，元组的知识总结 补充了一些常用函数\nc语言基础 ##内建型别## c语言是一个强类型的语言，数据必须明确指定类型，C++还加强了类型安全的检查 程序与数据：程序的任务：处理数据（信息），图片，视频，文本，日志，数据库等。 一个人的年龄，身高，体重，名字，健康状况，性别等数据，对应了不同的类型\nc语言标准，所有的都支持，占字节意为在磁盘中进行存储的时候必须要占这么多空间才能进行存储 字符类型：char/wchar_t 2个字节或者4个字节 char对应 wchar_t对应 整型：short 短暂，2个字节/int 标准，4个字节/long 长整型，winx86 8个字节/longlong 再linux用的多/_int64 win多，8字节 实数单精度：float 4字节 实数双精度：double 8字节 有符号和无符号：signed 有/unsigned 无,(signed)int 默认有/ unsigned int 布尔类型：bool,0/1(true/false) C99 \u0026lt;stdbool.h\u0026gt; 头文件 c语言内部支持的型别\n数据类型的实例 char gender = \u0026lsquo;M\u0026rsquo;;ASCII字符 wchar_t sex = L\u0026rsquo;F\u0026rsquo;;UNICODE字符 此字符一个字符占两个字节，ios和linux占4个字节 char name[16] = \u0026rsquo;tom\u0026rsquo;; 字符组有16个元素 wchar_t nick[16] = L\u0026rsquo;Jcak\u0026rsquo;;\nint age=30; float weight=79.1f; double height= 1.80 bool bhealthy= ture;\n内建型别，数据以字节为单位存储在内存中，不同类型的数据，存储占用的内存空间长度不同\n#字符型：char./wchar_t sizeof(char) = 1 即char类型占1个字节空间 采用ASCII编码，一个字符对应一个字节 sizeof(wchar_t) = 2或者4,字符数与字节数的区别 Unicode编码，一个字符对应多个字节 char c=\u0026lsquo;a\u0026rsquo;// \u0026lsquo;a\u0026rsquo;是字符常量，c是字符变量。常量用单引号包围 \u0026lsquo;\u0026rsquo;\u0026rsquo;-\u0026gt;\u0026rsquo;'\u0026rsquo; 表示字符常量的时候用单引号引起来，单引号也是一个字符，需要用转义字符来表示该引号不是字符 wchar_t wc=L\u0026rsquo;a\u0026rsquo;; unsigned char/signed char,只写char，由编译器决定是有符号无符号 字符编码：字符在计算机中是通过字符编码（字符的id）的形式存储的，\u0026lsquo;a\u0026rsquo;-\u0026gt;97,\u0026lsquo;A\u0026rsquo;-\u0026gt;65 ASCII码，美国标准信息交换代码 ASCII码是单字节编码系统，它使用指定的7位或者8位二进制数组合来表示128或256种可能的字符\n","date":"2025-10-19T00:00:00Z","image":"http://localhost:1313/p/10-19/bj_hu_24ba452ff7b4968e.jpg","permalink":"http://localhost:1313/p/10-19/","title":"10-19 笔记"},{"content":"10.18 美化博客 新增了背景图片，修改了字体，增加遮光罩，部分路径代码优化很差，网页加载变卡\npython熟练 洛谷B2007-B2014的入门编程题，新增语法表达，逻辑优化 如： ￥round(number, ndigits) 四舍五入函数 要舍入的数字和保留的小数位数（ 默认为0）不会强制保留小数 ￥f-string 字符串格式化 f\u0026quot;{变量：格式}\u0026quot; f\u0026rsquo; {} {} \u0026rsquo; 引号内相当于字符串，大括号内可以加变量 {} 内可以简洁表达 {:10 :\u0026lt;10 ^10}右对齐，左对齐，居中对齐 {:,.2f :.1%}千分位加保留2位 保留一位和百分比\n后续继续学习序列和巩固之前所学语法\nc语言学习 程序基础 程序的编译和链接\nvc\n预处理 a.c 编译 a.i 汇编 a.s 链接 a.o(a.obj) \u0026gt; a.exe c \u0026gt; i \u0026gt; s \u0026gt; o \u0026gt; exe\n多个c会编辑成多个obj，然后与lib一起链接成exe。pe格式 (可执行文件)\npe格式存放了程序执行的代码啊，数据，资源 是一种规范和标准\nwin:. exe/.dll/.sys =\u0026gt; pe Linux: elf\n病毒分析逆向\ndos ‘MZ’ e_magic MZ 开头 0X5a4d\ndos stub 主要起兼容作用\ne_lfanew 指向 pe文件头 PE\\0\\0: 0x50 0x45 00 00\n块表 记录每一个块的位置\n块 存放着可执行代码\n调试信息\nsection 节，块，段 eop 入口点，第一条指令所在地址 oep 原入口点，壳里面的概念 epo 入口模糊 病毒概念 病毒感染了程序，模糊了入口点 imageBase:0x4000000 exe从磁盘加载到内存中，有一个基地值，不修改的话是固定的（）编译可修改 VA 加载到内存中，pe文件的每一条指令，数据，变量的虚拟地址 RVA 相对虚拟地址，相对于imagebase VOFFSET 每一节的起始的虚拟地址减去imagebase得到的值 内存中起始地址截取imagebase ROFFSET 每一节的起始地址减去文件的首地址得到的偏移 磁盘中起始地址减去文件的首地址\npeid/petool pe petool 查壳查地址 notepad++/winhex\nextrypoint eop\nep section 所在的节 text 存放代码\n程序，是指令和数据的有序集合，本身没有任何运行的含义，静态概念\n存放在磁盘上的exe程序叫做映像文件 imagefile\n进程是程序在处理机上的一次执行过程，他是一个动态的概念，拥有一个完整的生命周期\n进程的是指是程序在系统中的一次执行过程，进程是动态产生，动态消亡的\n一个程序在不同的数据集里就构成不同的进程\n不同的程序可以启动不同数量的进程\n程序在运行的时候就有一个pid标识\n进程的三个状态：\n1，就绪状态\n已经获得除了处理器的所需资源，等待分配处理器\n2，运行状态\n占用cpu资源，\n3，阻塞状态\n等待某种条件，在条件满足前无法继续执行\n线程：为了提高系统并发的度。\n一个程序至少有一个进程\n一个进程至少有一个线程，进程是资源分配的基本单元，线程的调度的基本单元\n冯诺依曼体系 cpu(算术逻辑单元和浮点数逻辑单元) 寄存器 内存(RAM) 磁盘\ncpu 》计算 》计算器 》 储存\n系统总线，控制总线，地址总线，数据总线 连接cpu和内存，通过线路传输连接计算\ncpu：多核时代，一个cpu上有多个核，每一个核就是一个processor，操作系统的视角中一个核就是一个逻辑处理器\n系统内存布局\n分为俩个部分\nuser space 应用程序运行空间 2GB内核空间 0xffffffff\nkernel space 内核空间，操作系统的运行空间 0x7fffffff 64kb非法区域\n最下层是硬件 0x7fff0000 进程空间（私有的，每一个进程 之间的内存）\n64kb null空间 应用层程序R3\n内核层R0（最高权限）\nx86支持32位寻址，pae技术可以扩大内存空间\n2^32=4GB 32位系统，四个字节\nx64内存理论上支持2^64的寻址空间，目前一般只支持到40多位\n整数 ##整数##\n#进制转换\n十进制，二进制，十六进制，八进制\n1.c：\n十六进制：0x71ef（0x开头 A(10)B(11)C(12)D(13)E(14)F(15)）\n八进制：0127（0-7）\n二进制：101101(c里面没有单独的二进制表示方法)\n十进制：100\n2.进制只是整数值的表现形式，\n值123：123/0x7b/0173/01111011\n3.汇编语言：\n十六进制：1aH\n八进制：17O\n十进制：12D\n二级制：110B\n4.进制转换计算\nx进制转换10进制：\nA(n)A(n-1)\u0026hellip;..=A(n)*x^(n-1)\u0026hellip;\n十进制（A）转换x进制：\nA除以x取余数，再取商除以x取余数，直到商为0，再把所有余数逆序.\n有小数的数，十进制转二进制，小数点前后分开转换\n22.8125 00010110.1101\n对2进制分组，将每一个二进制专门转化为十六进制，每四位分一组，便于计算二进制转十六进制 整 数：1，2，4，8字节 浮点数：4个或者8个字节 5.特性 十六进制的特性 根据十六进制转化为二进制的方法，可以得出：在十六进制中，1个数字占四位，2个数字为一个字节 可以直接观察这个数在内存中每个字节的内容 8位二进制为一个字节，十六进制中每两个数字是一个字节 #整数编码 1.计算机存储数据的bit（位）与byte（字节） bit：位，小b，最小单位 byte：字节，大B，1Byte=8bit 网路带宽使用bit计算的 1个bit只能存储两个信息：0，1 1个Byte能存储2^8个信息：【-128，127】，【0，255】8位二进制，两位十六进制 2个Byte，4个Byte，8个Byte 数据存储位置，寄存器，内存，磁盘 一般按byte来计算存储单位 2.整数的正负表示\n有符号数：最高位做符号位这种表示的整数叫做有符号数（有正负之分）\n最高位做符号位，1表示负数，0表示正数\n如果用1个字节来表示整数，那么：\n10110110:负数\n01001011:正数\n无符号数：无负数，表示0和正整数，最高位无需表示正负，参与数值运算。\n一个字节的整数\n有符号：【-128，127】\n无符号：【0，255】\n3.整数的编码\n（最终采取了补码）整数是按照二进制储存的，二进制需要进行特定的编码规则存储：原码，反码，补码\n原码：在数值前面增加了一位符号位（即最高位位符号位），该位为0表示整数，该位为1表示负数，其余位标识数值的大小。\n以一个byte作为整数存储长度为例子：\n1： 00000001\n-1： 10000001\n那么1-1=1+（-1）=00000001+10000001=10000010=-2错误，符号位无法参加运算\n反码：正整数的反码就是其自身，而负整数的反码可以通过对其绝对值逐位求反来求得。\n以一个byte作为整数存储长度为例子：\n1： 00000001\n-1： 11111110\n那么1-1=1+（-1）=00000001+11111110=11111111=0错误，反码的问题在于+0和-0的情况，人常识的计算概念中0是没有正负之分的 补码：整数的补码为它本身，负数的补码就是它的绝对值求反加1，0的补码就是0 计算机采用补码储存整数\n以一个byte作为整数存储长度为例子：\n1： 00000001\n-1： 11111111\n100： 01100100\n-100： 10011100 （取反加1等于其绝对值）\n47： 00101111\n-47： 11010001\n-128： 10000000\n127： 01111111\n两个字节的100：00000000 01100100\n两个字节的-100：11111111 10011100\n两个字节的-1 ：11111111 11111111\n一个字节的补码扩充到两个字节，四个字节：\n正数：零扩充\n负数：一扩充\n用最高位的符号位去扩充\n4.整数的存储方式\n0x 12 34 56 78 左边是高位 右边是地位，设计的逻辑顺序\n内存存放，从左往右，由低到高\n低位优先-》低位存放在低地址 ：little-endian\n高位优先-》高位存放在低地址 ：big-endian\nx86系统，低位优先系统 同一种东西的不同存储方式\n0x 00 00 00 01\n低位优先： 01 00 00 00\n高位优先： 00 00 00 01\nhtons() 主机字节序到网络字节序转换\nhtohs() 网络字节序到主机字节序转换\n网络字节序是高位优先的\n","date":"2025-10-18T00:00:00Z","image":"http://localhost:1313/p/10-18/tutu_hu_64d12a5cb395fe5.jpg","permalink":"http://localhost:1313/p/10-18/","title":"10-18 笔记"},{"content":"第一周学习总结（未完） 首先是在ctfplus做的题\n做了一部分misc和一部分re的题\n先说re\n有两道sign题\nsign1 在ida中反编译在代码中直接能看到flag\nsign2 根据运行提示和代码分析，flag应该是通过ROT47方式加密的\nROT47：凯撒加密变种，通过映射ASCII 字符集进行移位加密。可以将数字，字母，符号全部混合互换\n加密解密算法完全相同\n此题已知flag开头为\u0026quot;0xGame\u0026quot;,将问题喂给ai，通过python代码暴力破解可以得到答案\n不过此题中还进行了一个变换\n其中decrypt是一个解密函数，并不是常规rot47解密，此题是一个rot47的变种\n一道BaseUPX的题\n用软件检查exe发现是UPX壳，然后脱壳之后再查看反编译代码\n根据代码中base64_encode的提示，找到base64的编码，再利用ai解码\n一道睡觉zzz的题\n此题的核心是sha-256，ASCII字符，长度验证，%8x格式说明符\n根据代码提示，format error和wrong的区别，先检查格式问题，再排查其他\n然后是sscanf(s1, \u0026ldquo;0xGame{%8x%8x%8x%8x}\u0026rdquo;, \u0026amp;x1, \u0026amp;x2, \u0026amp;x3, \u0026amp;x4)这一段说明是4个8位十六进制数\nSHA=256哈希无法反推出原始数据\n最后就是编写代码使得4个十六进制数满足代码中所给出的方程，导入ai可得\n但本题还有一个问题，已在程序中获得正确提示的答案提交不对\n一道简单异或题\n找到str函数对应代码，导入ai进行编译可得\n一道dydebug复杂加密问题，四种加密方式，也是利用ai解出，具体图片未保存\n然后是misc方向的题目\n一道base64编码和凯撒加密的题目\n一道图片lsb隐写题，利用stegsolve看RGB编码解出\n最后一道是docx，利用010查询编码发现是504b0304，改格式解压得出\n接着是学习的linux基本命令，询问ai之后在系统中试过抄写命令\n","date":"2025-10-12T00:00:00Z","image":"http://localhost:1313/p/first-week/gui_hu_71ce81c2b99a7331.png","permalink":"http://localhost:1313/p/first-week/","title":"第一周总结"},{"content":"c语言基础 ASCII码，美国标准信息交换代码 ASCII码是单字节编码系统，它使用指定的7位或者8位二进制数组合来表示128或256种可能的字符 标准ASCII码也叫基础ASCII码，使用7位二进制数来表示所有的大写和小写字母，数字0-9，标点符号，以及在美式英语中使用的特殊控制字符 char c= 'A',//c=65 char ch='0';//ch=48 UNICODE编码 ASCII编码只能表示有限的字符数，为了能够将世界上所有的字符都纳入编码范围，UNICODE字符编码便产生了，在UNICODE字符编码中，经常采用的是用2个字节或4个字节来表示一个字符，UNICODE编码的具体实现包括UTF-8，UTF-16和UTF-32。其中UTF-8中的字符占用的字节可以从1到4个，而UTF-16占两个字节，UTF-32占4个字节。 unicode编码兼容ASCII编码 '0' '1'被引号括起来，表示1和0的字符，有对应的编码，而0，和1对应的就是整数的值， 如何把一个字符转化成整数： c - '0'// '5'-'0'=5 (减0这个字符) 整数转化成字符： i + '0'// 5+'0'='5' （加0这个字符） 大写转小写 char c = 'M' c + 'a' - 'A' 字母大小写之间转化差32位值，所以加上小a减大A，不直接写32是为了能看懂 char ch='y' ch + 'A'-'a' a=97 A=65 #整形 short int 简写为 short int long int 简写为 long long long _int64 char也可以看作一种整型 short a1 = 100 int a2 = 0x64 long a3 = 100L unsigned short a4 = 100 unsigned int a5 100 unsigned long a6 = 100UL long long a7 100ll;Linux _int64 a8 = 100i64 ;windows 长度不对，会容易出很多漏洞，\n浮点类型 float//单精度, 4个字节 double//双精度，8个字节 float x=3.1415f 如果不写f系统会认为这是一个双精度浮点数 double y = 1.732\n自定义新的类型 typedef int INTl typedef unsigned int UINT typedef unsigned short USHORT typedef char CHAR typedef unsigned long ULONG typedef usigned short WORD typedef unsigned int DWORD typedef unsigned char BYTE typedef unsigned int size_t\n数据结构体，列表节点，二次参数 可以用来应对c语言代码中的标准或者平台发生了变化，重新定义可以减少代码的修改量 代码更简单 统一编码风格\npython 学习了字典及其基础语法知识\n","date":"2025-10-10T00:00:00Z","image":"http://localhost:1313/p/10-10/bj_hu_11ea6599ea83224e.jpg","permalink":"http://localhost:1313/p/10-10/","title":"10-10 笔记"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2025-10-08T00:00:00Z","image":"http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"http://localhost:1313/p/emoji-support/","title":"Emoji Support"},{"content":"第一篇文章 介绍 我已出仓，感觉良好。\n刚看啥也不是，点开一看更是啥也不是\n在第一篇文章里面做一些尝试\n引用 我曾经爱过你，爱情，也许；\n在我的心灵里还没有完全消亡；\n但愿它不会再打扰你；\n我也不想再使你难过悲伤；\n我曾经默默无语，毫无指望地爱过你；\n我既忍受着羞怯，又忍受着嫉妒的折磨；\n我曾经那样真诚，那样温柔地爱过你；\n但愿上帝保佑你，它会比我更爱你。\n\u0026mdash;普希金\n莫言在《晚熟的人》里这样写道：\n“烟火人间，各有遗憾。\n想过安稳日子的女人，却嫁给了挣不来qian的男人；\n想过安稳日子的男人，却娶了爱败家的女人；\n做得一手好菜的女人，等不到回家吃饭的男人；\n经常回家吃饭的男人，偏偏娶了不会做饭的女人。\n山山而川，不过尔尔。在喜欢你的人那里去热爱生活，在不喜欢你的人那里去看清世界，就这么简单。”\n活着活着你就会明白，这个世界是守恒的。\n很多婚姻好的人，事业不行；\n事业好的人，婚姻不行；\n事业婚姻都好的人，可能身体不好。\n大部分有成就的人，大多是六亲无靠，六亲无靠大概就是他们用来交换成功的代价，所以对于很多事不必太执着。\n枕边人成不了心上人，心上人也成不了枕边人。枕边人给不了爱，心上人给不了家；\n最终，枕边人守着过了一辈子，心上人待在心里一辈子。\n我们本不善言辞，为了生活，却不得不忙于交际；\n我们本喜欢独处，为了生活，却不得不四处奔波。\n在无人问津的地方，拿尊严换qian；\n在人声鼎沸的地方，拿qian换取尊严。\n有工作的地方没有家，有家的地方没有工作。\n他乡容不下灵魂，故乡安不了肉身。\n上苍不会让所有幸福集中到某个人身上。\n得到了爱情未必拥有金qian，拥有金qian未必得到快乐；\n得到快乐未必拥有健康，拥有健康未必一切都会如愿以偿。\n你得到了这个，还想要那个，但不可能所有的好处你都能得到。你不可能同时拥有春花和秋月，也不可能同时拥有硕果和繁花。\n人生最忌讳的就是过于圆满，不信你看看身边的人。\n有人婚姻不好，但子女很优秀；\n有人婚姻很好，但身体不太好；\n有人事业很顺，但家庭不和睦；\n有人家庭和睦，日子却过得很清贫。\n人生哪能都如意，万事只能半称心。美满的婚姻是由瞎子女人和聋子男人缔成，我们都是和对方的优点谈恋爱，却和他们的缺点生活在一起，天下没有十全十美的男女。婚姻不是争输赢，半睁眼半闭眼过生活，少用放大镜看对方，否则连上帝身上都能挑出毛病。\n时光煮雨，岁月缝花。这烟火人间，事事遗憾，但事事也值得！\n图片 注意 +++ \u0026mdash; +++ 和 \u0026mdash; 是两种语法\n","date":"2021-09-03T00:00:00Z","image":"http://localhost:1313/p/first-word/121_hu_217da5c3ce36f442.jpg","permalink":"http://localhost:1313/p/first-word/","title":"人生总有第一次"}]
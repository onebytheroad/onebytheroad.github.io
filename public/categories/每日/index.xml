<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>每日 on 雫的小站</title>
        <link>http://localhost:1313/categories/%E6%AF%8F%E6%97%A5/</link>
        <description>Recent content in 每日 on 雫的小站</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Sat, 18 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/%E6%AF%8F%E6%97%A5/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>10-18 笔记</title>
        <link>http://localhost:1313/p/10-18/</link>
        <pubDate>Sat, 18 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/10-18/</guid>
        <description>&lt;img src="http://localhost:1313/p/10-18/tutu.jpg" alt="Featured image of post 10-18 笔记" /&gt;&lt;h3 id=&#34;1018&#34;&gt;10.18
&lt;/h3&gt;&lt;h2 id=&#34;美化博客&#34;&gt;美化博客
&lt;/h2&gt;&lt;p&gt;新增了背景图片，修改了字体，增加遮光罩，部分路径代码优化很差，网页加载变卡&lt;/p&gt;
&lt;h2 id=&#34;python熟练&#34;&gt;python熟练
&lt;/h2&gt;&lt;p&gt;洛谷B2007-B2014的入门编程题，新增语法表达，逻辑优化
如：
￥round(number, ndigits)  四舍五入函数  要舍入的数字和保留的小数位数（ 默认为0）不会强制保留小数
￥f-string 字符串格式化 f&amp;quot;{变量：格式}&amp;quot;   f&amp;rsquo;  {}   {} &amp;rsquo;  引号内相当于字符串，大括号内可以加变量
{} 内可以简洁表达   {:10    :&amp;lt;10    ^10}右对齐，左对齐，居中对齐  {:,.2f      :.1%}千分位加保留2位      保留一位和百分比&lt;/p&gt;
&lt;p&gt;后续继续学习序列和巩固之前所学语法&lt;/p&gt;
&lt;h2 id=&#34;c语言学习&#34;&gt;c语言学习
&lt;/h2&gt;&lt;h1 id=&#34;程序基础&#34;&gt;程序基础
&lt;/h1&gt;&lt;p&gt;程序的编译和链接&lt;br&gt;
vc&lt;/p&gt;
&lt;p&gt;预处理 a.c    编译 a.i     汇编 a.s       链接 a.o(a.obj)     &amp;gt;  a.exe
c      &amp;gt;       i     &amp;gt;    s     &amp;gt;     o    &amp;gt;   exe&lt;/p&gt;
&lt;p&gt;多个c会编辑成多个obj，然后与lib一起链接成exe。pe格式  (可执行文件)&lt;br&gt;
pe格式存放了程序执行的代码啊，数据，资源        是一种规范和标准&lt;/p&gt;
&lt;p&gt;win:. exe/.dll/.sys =&amp;gt; pe &lt;br&gt;
Linux: elf&lt;br&gt;
病毒分析逆向&lt;/p&gt;
&lt;p&gt;dos ‘MZ’   e_magic MZ 开头  0X5a4d&lt;br&gt;
dos stub         主要起兼容作用&lt;/p&gt;
&lt;p&gt;e_lfanew 指向 pe文件头
PE\0\0: 0x50 0x45 00 00&lt;/p&gt;
&lt;p&gt;块表 记录每一个块的位置&lt;/p&gt;
&lt;p&gt;块 存放着可执行代码&lt;/p&gt;
&lt;p&gt;调试信息&lt;/p&gt;
&lt;p&gt;section 节，块，段
eop  入口点，第一条指令所在地址
oep  原入口点，壳里面的概念
epo  入口模糊  病毒概念  病毒感染了程序，模糊了入口点
imageBase:0x4000000   exe从磁盘加载到内存中，有一个基地值，不修改的话是固定的（）编译可修改
VA  加载到内存中，pe文件的每一条指令，数据，变量的虚拟地址
RVA 相对虚拟地址，相对于imagebase
VOFFSET  每一节的起始的虚拟地址减去imagebase得到的值  内存中起始地址截取imagebase
ROFFSET  每一节的起始地址减去文件的首地址得到的偏移   磁盘中起始地址减去文件的首地址&lt;/p&gt;
&lt;p&gt;peid/petool     pe petool 查壳查地址
notepad++/winhex&lt;/p&gt;
&lt;p&gt;extrypoint eop&lt;br&gt;
ep section 所在的节 text 存放代码&lt;/p&gt;
&lt;p&gt;程序，是指令和数据的有序集合，本身没有任何运行的含义，静态概念&lt;br&gt;
存放在磁盘上的exe程序叫做映像文件 imagefile&lt;/p&gt;
&lt;p&gt;进程是程序在处理机上的一次执行过程，他是一个动态的概念，拥有一个完整的生命周期&lt;br&gt;
进程的是指是程序在系统中的一次执行过程，进程是动态产生，动态消亡的&lt;br&gt;
一个程序在不同的数据集里就构成不同的进程&lt;br&gt;
不同的程序可以启动不同数量的进程&lt;br&gt;
程序在运行的时候就有一个pid标识&lt;br&gt;
进程的三个状态：&lt;br&gt;
1，就绪状态&lt;br&gt;
已经获得除了处理器的所需资源，等待分配处理器&lt;br&gt;
2，运行状态&lt;br&gt;
占用cpu资源，&lt;br&gt;
3，阻塞状态&lt;br&gt;
等待某种条件，在条件满足前无法继续执行&lt;/p&gt;
&lt;p&gt;线程：为了提高系统并发的度。&lt;br&gt;
一个程序至少有一个进程&lt;br&gt;
一个进程至少有一个线程，进程是资源分配的基本单元，线程的调度的基本单元&lt;/p&gt;
&lt;p&gt;冯诺依曼体系   cpu(算术逻辑单元和浮点数逻辑单元)  寄存器   内存(RAM)   磁盘&lt;/p&gt;
&lt;p&gt;cpu 》计算 》计算器 》 储存&lt;br&gt;
系统总线，控制总线，地址总线，数据总线  连接cpu和内存，通过线路传输连接计算&lt;/p&gt;
&lt;p&gt;cpu：多核时代，一个cpu上有多个核，每一个核就是一个processor，操作系统的视角中一个核就是一个逻辑处理器&lt;/p&gt;
&lt;p&gt;系统内存布局&lt;br&gt;
分为俩个部分&lt;/p&gt;
&lt;p&gt;user space    应用程序运行空间                         2GB内核空间 0xffffffff&lt;/p&gt;
&lt;p&gt;kernel space   内核空间，操作系统的运行空间            0x7fffffff   64kb非法区域&lt;br&gt;
最下层是硬件                           0x7fff0000 &lt;br&gt;
进程空间（私有的，每一个进程  之间的内存）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                    64kb null空间  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;应用层程序R3&lt;br&gt;
内核层R0（最高权限）&lt;/p&gt;
&lt;p&gt;x86支持32位寻址，pae技术可以扩大内存空间&lt;br&gt;
2^32=4GB  32位系统，四个字节&lt;/p&gt;
&lt;p&gt;x64内存理论上支持2^64的寻址空间，目前一般只支持到40多位&lt;/p&gt;
&lt;h1 id=&#34;整数&#34;&gt;整数
&lt;/h1&gt;&lt;p&gt;##整数##&lt;br&gt;
#进制转换&lt;br&gt;
十进制，二进制，十六进制，八进制&lt;br&gt;
1.c：&lt;br&gt;
十六进制：0x71ef（0x开头 A(10)B(11)C(12)D(13)E(14)F(15)）&lt;br&gt;
八进制：0127（0-7）&lt;br&gt;
二进制：101101(c里面没有单独的二进制表示方法)&lt;br&gt;
十进制：100&lt;br&gt;
2.进制只是整数值的表现形式，&lt;br&gt;
值123：123/0x7b/0173/01111011&lt;br&gt;
3.汇编语言：&lt;br&gt;
十六进制：1aH&lt;br&gt;
八进制：17O&lt;br&gt;
十进制：12D&lt;br&gt;
二级制：110B&lt;br&gt;
4.进制转换计算&lt;br&gt;
x进制转换10进制：&lt;br&gt;
A(n)A(n-1)&amp;hellip;..=A(n)*x^(n-1)&amp;hellip;&lt;br&gt;
十进制（A）转换x进制：&lt;br&gt;
A除以x取余数，再取商除以x取余数，直到商为0，再把所有余数逆序.&lt;br&gt;
有小数的数，十进制转二进制，小数点前后分开转换&lt;br&gt;
22.8125   00010110.1101&lt;br&gt;
对2进制分组，将每一个二进制专门转化为十六进制，每四位分一组，便于计算二进制转十六进制
整  数：1，2，4，8字节
浮点数：4个或者8个字节
5.特性
十六进制的特性
根据十六进制转化为二进制的方法，可以得出：在十六进制中，1个数字占四位，2个数字为一个字节
可以直接观察这个数在内存中每个字节的内容
8位二进制为一个字节，十六进制中每两个数字是一个字节
#整数编码
1.计算机存储数据的bit（位）与byte（字节）
bit：位，小b，最小单位
byte：字节，大B，1Byte=8bit
网路带宽使用bit计算的
1个bit只能存储两个信息：0，1
1个Byte能存储2^8个信息：【-128，127】，【0，255】8位二进制，两位十六进制
2个Byte，4个Byte，8个Byte
数据存储位置，寄存器，内存，磁盘  一般按byte来计算存储单位
2.整数的正负表示&lt;br&gt;
有符号数：最高位做符号位这种表示的整数叫做有符号数（有正负之分）&lt;br&gt;
最高位做符号位，1表示负数，0表示正数&lt;br&gt;
如果用1个字节来表示整数，那么：&lt;br&gt;
10110110:负数&lt;br&gt;
01001011:正数&lt;br&gt;
无符号数：无负数，表示0和正整数，最高位无需表示正负，参与数值运算。&lt;br&gt;
一个字节的整数&lt;br&gt;
有符号：【-128，127】&lt;br&gt;
无符号：【0，255】&lt;br&gt;
3.整数的编码&lt;br&gt;
（最终采取了补码）整数是按照二进制储存的，二进制需要进行特定的编码规则存储：原码，反码，补码&lt;br&gt;
原码：在数值前面增加了一位符号位（即最高位位符号位），该位为0表示整数，该位为1表示负数，其余位标识数值的大小。&lt;br&gt;
以一个byte作为整数存储长度为例子：&lt;br&gt;
1：  00000001&lt;br&gt;
-1：  10000001&lt;br&gt;
那么1-1=1+（-1）=00000001+10000001=10000010=-2错误，符号位无法参加运算&lt;/p&gt;
&lt;p&gt;反码：正整数的反码就是其自身，而负整数的反码可以通过对其绝对值逐位求反来求得。&lt;br&gt;
以一个byte作为整数存储长度为例子：&lt;br&gt;
1：  00000001&lt;br&gt;
-1：  11111110&lt;br&gt;
那么1-1=1+（-1）=00000001+11111110=11111111=0错误，反码的问题在于+0和-0的情况，人常识的计算概念中0是没有正负之分的 &lt;br&gt;
补码：整数的补码为它本身，负数的补码就是它的绝对值求反加1，0的补码就是0 &lt;br&gt;
计算机采用补码储存整数&lt;br&gt;
以一个byte作为整数存储长度为例子：&lt;br&gt;
1：  00000001&lt;br&gt;
-1：  11111111&lt;br&gt;
100：  01100100&lt;br&gt;
-100：  10011100   （取反加1等于其绝对值）&lt;br&gt;
47：  00101111&lt;br&gt;
-47：  11010001&lt;br&gt;
-128：  10000000&lt;br&gt;
127：  01111111&lt;br&gt;
两个字节的100：00000000 01100100&lt;br&gt;
两个字节的-100：11111111 10011100&lt;br&gt;
两个字节的-1  ：11111111 11111111&lt;br&gt;
一个字节的补码扩充到两个字节，四个字节：&lt;br&gt;
正数：零扩充&lt;br&gt;
负数：一扩充&lt;br&gt;
用最高位的符号位去扩充&lt;br&gt;
4.整数的存储方式&lt;br&gt;
0x 12 34 56 78  左边是高位  右边是地位，设计的逻辑顺序&lt;br&gt;
内存存放，从左往右，由低到高&lt;br&gt;
低位优先-》低位存放在低地址 ：little-endian&lt;br&gt;
高位优先-》高位存放在低地址 ：big-endian&lt;br&gt;
x86系统，低位优先系统                     同一种东西的不同存储方式&lt;br&gt;
0x 00 00 00 01&lt;br&gt;
低位优先： 01 00 00 00&lt;br&gt;
高位优先： 00 00 00 01&lt;br&gt;
htons()    主机字节序到网络字节序转换&lt;br&gt;
htohs()  网络字节序到主机字节序转换&lt;br&gt;
网络字节序是高位优先的&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>

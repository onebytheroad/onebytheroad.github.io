<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>雫的小站</title>
        <link>http://localhost:1313/</link>
        <description>Recent content on 雫的小站</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Example Person</copyright>
        <lastBuildDate>Wed, 22 Oct 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>10-22 笔记</title>
        <link>http://localhost:1313/p/10-22/</link>
        <pubDate>Wed, 22 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/10-22/</guid>
        <description>&lt;img src="http://localhost:1313/p/10-22/bj.jpg" alt="Featured image of post 10-22 笔记" /&gt;&lt;h1 id=&#34;第五课-变量&#34;&gt;第五课-变量
&lt;/h1&gt;&lt;h2 id=&#34;c语言变量定义与命名&#34;&gt;c语言变量定义与命名
&lt;/h2&gt;&lt;h3 id=&#34;常量固定不变的量&#34;&gt;常量:固定不变的量
&lt;/h3&gt;&lt;p&gt;100    //int   整数&lt;/p&gt;
&lt;p&gt;‘a’       //character    字符&lt;/p&gt;
&lt;p&gt;&amp;ldquo;hello world&amp;rdquo;    //string     字符串&lt;/p&gt;
&lt;p&gt;3.1415926        //double    双精度浮点数&lt;/p&gt;
&lt;p&gt;1.732f               //float      单精度浮点数&lt;/p&gt;
&lt;p&gt;#define PI 3.1415926  定义一个PI，宏定义&lt;/p&gt;
&lt;h3 id=&#34;变量&#34;&gt;变量
&lt;/h3&gt;&lt;p&gt;变量是内存或寄存器中用一个标识符命名的存储单元，可以用来存储一个特定类型的数据，并且数据的值在程序运行的过程中可以进行修改&lt;/p&gt;
&lt;p&gt;变量就至少可为我们提供两个信息：&lt;/p&gt;
&lt;p&gt;一是变量的地址，也就是操作系统为变量在内存中分配的若干内存的首地址&lt;/p&gt;
&lt;p&gt;二是变量的值，也就是，变量在内存中所分配的那些内存单元中所存放的数据&lt;/p&gt;
&lt;p&gt;int a = 10   常量赋值整型a&lt;/p&gt;
&lt;p&gt;a = 100   修改a的值&lt;/p&gt;
&lt;p&gt;&amp;amp;a   &amp;amp;：取值符，获得变量a在内存中的地址，&lt;em&gt;&lt;strong&gt;常量是没有内存的，不能在常量前加&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;printf(&amp;ldquo;addr.%p,value:%d\n&amp;rdquo;,&amp;amp;a,a);&lt;/p&gt;
&lt;h4 id=&#34;变量命名原则&#34;&gt;变量命名原则
&lt;/h4&gt;&lt;p&gt;***变量名由字母，下划线和数字组成，但第一个字符必须为字母，下划线也被看做是字母。***大写字母与小写字母是有区别的，比如a与A是两个不同的变量名。一般大写字母组成的名字用作符号常量。&lt;/p&gt;
&lt;p&gt;变量名不能与C编译系统中哥已经预定义的，具有特殊用途的关键字同名。比如float,auto,break等&lt;/p&gt;
&lt;p&gt;一个变量的名字，一般说来，变量名与函数名应该足够长，以有效地描述所命名的变量或函数。应该避免使用短而模糊的名字，因为它们在别人理解你的程序时会带来麻烦。大多数ANSI编译程序允许有至少31个有效字符，即只有变量或函数名的钱31个字符的唯一性会被检查。一种较好的经验是使函数名的前31个字符的唯一性会被检查。一种较好的经验是使函数名或变量名读起来符合英语习惯。代码的自解释性。&lt;/p&gt;
&lt;p&gt;一般来说，一个局部变量的名字，建议使用比较短的名，而全局变量，使用比较长的名字。比如，一个用于循环的局部变量，一般用一个i来作为名字就足够了&lt;/p&gt;
&lt;p&gt;在windows平台，变量的命名一般遵循匈牙利法则，unix和linux不推荐&lt;/p&gt;
&lt;p&gt;&lt;em&gt;基本原则：变量名=属性+类型+对象描述&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;linux：不推荐大小写混用，一般标识符或者函数名只有小写字母和数字和下划线构成&lt;/em&gt;&lt;/p&gt;
&lt;h5 id=&#34;匈牙利命名法则&#34;&gt;匈牙利命名法则
&lt;/h5&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/xiongyalifaze.png&#34;
	width=&#34;1917&#34;
	height=&#34;1299&#34;
	srcset=&#34;http://localhost:1313/p/10-22/xiongyalifaze_hu_e8647caf670122f1.png 480w, http://localhost:1313/p/10-22/xiongyalifaze_hu_997fc5bdde4713e7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by xiongyalifaza&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;354px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;图中helloworld改成人名更贴切&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;其他变量法则&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/qitabianliang.png&#34;
	width=&#34;1912&#34;
	height=&#34;1293&#34;
	srcset=&#34;http://localhost:1313/p/10-22/qitabianliang_hu_b03b67c7ed975c88.png 480w, http://localhost:1313/p/10-22/qitabianliang_hu_ef57f1d11cba9d00.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by qitabianliang&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;354px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;linux也可以叫做下划线命名法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/zuoye1.png&#34;
	width=&#34;1925&#34;
	height=&#34;1209&#34;
	srcset=&#34;http://localhost:1313/p/10-22/zuoye1_hu_164f793e183113cc.png 480w, http://localhost:1313/p/10-22/zuoye1_hu_b047020de78cf7ba.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by zuoye1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;变量作用域存储空间生命周期&#34;&gt;变量作用域，存储空间，生命周期
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/em&gt;  &lt;strong&gt;绝对重点&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;系统内存布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/fuxi1.png&#34;
	width=&#34;1921&#34;
	height=&#34;1318&#34;
	srcset=&#34;http://localhost:1313/p/10-22/fuxi1_hu_6a7655c9df56f797.png 480w, http://localhost:1313/p/10-22/fuxi1_hu_810dd32110b0b681.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by fuxi1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;349px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;内核空间，只能有最高权限的内核代码才能访问&lt;/p&gt;
&lt;p&gt;进程空间，&lt;/p&gt;
&lt;p&gt;NULL空间是无法访问的&lt;/p&gt;
&lt;p&gt;非法区域隔离内核和进程，所有的进程进入内核空间，对所有进程共享，每个进程在进程空间中是互相隔离的，不能互相访问，传递；或者使用专门的通信&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;程序内存布局&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/fixu2.png&#34;
	width=&#34;1911&#34;
	height=&#34;1303&#34;
	srcset=&#34;http://localhost:1313/p/10-22/fixu2_hu_36d6b2be02f1e791.png 480w, http://localhost:1313/p/10-22/fixu2_hu_549043e615ffff77.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by fixu2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;351px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一个进程空间的布局&lt;/p&gt;
&lt;p&gt;代码区存放代码，静态区存放数据&lt;/p&gt;
&lt;p&gt;堆区，可以在堆区上手动分配内存&lt;/p&gt;
&lt;p&gt;栈是从上往下增长，&lt;em&gt;空间有限，不能无限增长&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;内核空间严禁使用递归算法，不断调用自己的时候会吞空间&lt;/p&gt;
&lt;p&gt;未初始化的全局变量和静态变量（没有被定义）的值默认为零&lt;/p&gt;
&lt;p&gt;汇编代码会在程序运行时将没有定义的变量全部设为0，变量需要经过初始化才能使用&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;变量分类：全局变量，局部变量，静态变量（静态全局变量和静态局部变量），寄存器变量&lt;/p&gt;
&lt;p&gt;全局变量：全局变量的说明的位置在所有函数之外，整个程序可见，生命周期为整个程序运行期间，存储位置为静态存储区&lt;/p&gt;
&lt;p&gt;全局静态变量：与全局变量唯一不同的地方是作用域：当前源文件，别的文件不饿能访问该变量-demo&lt;/p&gt;
&lt;p&gt;局部变量：在函数内部说明的变量为局部变量，只有在函数执行时，局部变量才存在，当函数执行完推出后，局部变量随之消失。作用域为函数内部，存储空间为栈&lt;/p&gt;
&lt;p&gt;局部静态变量：与局部变量的区别是，存储在静态区，整个程序运行期间有效，具有记忆功能，值初始化一次，下次调用函数，保留着上次函数运行之后的值-demo&lt;/p&gt;
&lt;p&gt;寄存器变量：不像其他变量那样在内存中存放数据，而是在cpu的寄存器中暂存数据，使用寄存器变量比使用内存变量的操作速度快得多，只有整形和字符型变量可定义为寄存器变量，由于cpu中寄存器有限，尽量减少使用数量和占用时间，用完马上释放；不能定义为全局变量，也不能定义在结构或者类中&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/bianliang.png&#34;
	width=&#34;1119&#34;
	height=&#34;453&#34;
	srcset=&#34;http://localhost:1313/p/10-22/bianliang_hu_6e82e89c32e6055b.png 480w, http://localhost:1313/p/10-22/bianliang_hu_a1c9fe435358da4b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by bianliang&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;592px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;举例&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/lizi.png&#34;
	width=&#34;1575&#34;
	height=&#34;1092&#34;
	srcset=&#34;http://localhost:1313/p/10-22/lizi_hu_3d095da2e2c00ab5.png 480w, http://localhost:1313/p/10-22/lizi_hu_cce581ef21a10f2e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by lizi&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;346px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;初始化的全局变量，存放在.data区，未初始化的全局变量存放在.bss区。例如例子中的0和p1，一个是初始化了存放在data区，一个没有初始化存放在bss区&lt;/p&gt;
&lt;p&gt;生命周期：变量的有效期，从创建到消亡到失去作用。全局变量，即从程序开始运行到结束运行，都有意义&lt;/p&gt;
&lt;p&gt;在不同源文件中定义的全局变量，他们的初始化是不分先后的。如果在同意文件中给，先定义的就先初始化。&lt;/p&gt;
&lt;p&gt;全局静态变量，存储空间和生命周期都与全局变量一样，但是作用域不一样，只能在当前源文件可以访问使用，别的源文件无法访问和使用，用来防止命令冲突（一个项目中不能同时出现两个一样的变量名 ）&lt;/p&gt;
&lt;p&gt;用extern 来声明，导入其他源文件的全局变量&lt;/p&gt;
&lt;p&gt;函数的调用，数据的传递，内存的分配都是在栈上&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/zongjie.png&#34;
	width=&#34;1519&#34;
	height=&#34;839&#34;
	srcset=&#34;http://localhost:1313/p/10-22/zongjie_hu_11293665cfa32064.png 480w, http://localhost:1313/p/10-22/zongjie_hu_7a054c970b1f6cf5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by zongjie&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;作业&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-22/zuoye2.png&#34;
	width=&#34;1911&#34;
	height=&#34;1293&#34;
	srcset=&#34;http://localhost:1313/p/10-22/zuoye2_hu_94b6f12a584ea619.png 480w, http://localhost:1313/p/10-22/zuoye2_hu_efedb83e9eb14ba0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by zuoye2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;354px&#34;
	
&gt;&lt;/p&gt;
&lt;h1 id=&#34;python-集合&#34;&gt;python 集合
&lt;/h1&gt;&lt;p&gt;集合中所有元素都是无序的且独一无二的&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;创建一个集合&lt;/p&gt;
&lt;p&gt;1.花括号&lt;/p&gt;
&lt;p&gt;{&amp;ldquo;fish&amp;rdquo;,&amp;ldquo;python&amp;rdquo;}&lt;/p&gt;
&lt;p&gt;2.集合推导式&lt;/p&gt;
&lt;p&gt;{s for s in &amp;ldquo;fish&amp;rdquo;}   -&amp;gt; {&amp;lsquo;h&amp;rsquo;,&amp;lsquo;i&amp;rsquo;,&amp;lsquo;f&amp;rsquo;,&amp;rsquo;s&amp;rsquo;}&lt;/p&gt;
&lt;p&gt;3.类型构造器  set&lt;/p&gt;
&lt;p&gt;set(&amp;lsquo;fish&amp;rsquo;)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;集合不能使用下标来访问&lt;/p&gt;
&lt;p&gt;可以使用in来判断某个元素是否存在于集合中&lt;/p&gt;
&lt;p&gt;或者使用for in迭代来访问集合中的元素&lt;/p&gt;
&lt;h2 id=&#34;唯一性&#34;&gt;唯一性
&lt;/h2&gt;&lt;p&gt;可以给元素去重&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s = [1,1,2,3,5] &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;len(s) == len(set(s))&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;copy&#34;&gt;copy
&lt;/h2&gt;&lt;p&gt;浅拷贝操作&lt;/p&gt;
&lt;p&gt;&lt;code&gt;t = s.copy()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;检验是否毫不相干&#34;&gt;检验是否毫不相干
&lt;/h2&gt;&lt;p&gt;相干，即是否拥有交集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.isdisjoint(set(&amp;quot;python&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然，也可以直接传入一个字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.isdisjoint(&amp;quot;python&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;子集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.issubset(&amp;quot;  &amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;超集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.issuperset(&amp;quot;  &amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并集：将其他元素与原集合合并&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.union({  })&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;交集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.intersection(&amp;quot;  &amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;差集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.difference(&amp;quot;  &amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对称差集：不支持多参数&lt;/p&gt;
&lt;p&gt;s.symmetric_difference(&amp;quot; &amp;ldquo;)&lt;/p&gt;
&lt;p&gt;可以用运算符直接运算&lt;/p&gt;
&lt;p&gt;&amp;lt;= 检测子集   &amp;lt; 检测真子集  &amp;gt;  真超集 &amp;gt;=  超集&lt;/p&gt;
&lt;p&gt;|  并集  &amp;amp;   交集  -  差集      ^ 对称差集&lt;/p&gt;
&lt;p&gt;使用运算符的话左右两边需要都需要是集合&lt;/p&gt;
&lt;h2 id=&#34;可变和不可变--set--frozenset&#34;&gt;可变和不可变  set &amp;amp; frozenset
&lt;/h2&gt;&lt;p&gt;update(*others) 将使用others参数的值来更新集合  （多个）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.update([1,1],&amp;quot;23&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上述代码得到的集合内容则会只添加&amp;quot;1&amp;rdquo;,&amp;ldquo;2&amp;rdquo;,&amp;ldquo;3&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;intersection_update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;difference_update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;symmetric_difference_update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果没有update则返回的是计算结果，并不会更改该集合里面的内容&lt;/p&gt;
&lt;p&gt;单纯的只添加数据&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.add(&amp;quot;&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之前是迭代出每个元素插入，add是可以将字符串插入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.remove&lt;/code&gt;   会抛出异常&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s.discard &lt;/code&gt; 会静默处理&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pop&lt;/code&gt;    随机从集合中弹出一个元素&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clear&lt;/code&gt;  直接清空&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;可哈希&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;正确创建字典或者说集合，必须要求键或元素必须是可哈希的&lt;/p&gt;
&lt;p&gt;hash(object)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hash(1)&lt;/code&gt;   =  &lt;code&gt;hash(1.0)&lt;/code&gt;  对一个相等的值，尽管是不同的对象&lt;/p&gt;
&lt;p&gt;大多数可变对象是不可哈希的，不可变对象是可哈希的&lt;/p&gt;
&lt;p&gt;集合的嵌套，需要使用frozenset&lt;/p&gt;
</description>
        </item>
        <item>
        <title>10-21 笔记</title>
        <link>http://localhost:1313/p/10-21/</link>
        <pubDate>Tue, 21 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/10-21/</guid>
        <description>&lt;img src="http://localhost:1313/p/10-21/bi.jpg" alt="Featured image of post 10-21 笔记" /&gt;&lt;h3 id=&#34;c语言基础&#34;&gt;c语言基础
&lt;/h3&gt;&lt;h2 id=&#34;类型长度与取值范围&#34;&gt;类型长度与取值范围
&lt;/h2&gt;&lt;p&gt;类型长度-sizeof
sizeof(char)   1
sizeof(wchar_t)   2或4
sizeof(short)   2
sizeof(int)    4
sizeof(long)   4         linux X86为4，X64为8
sizeof(float)  4
sizeof(double)   8
sizeof(bool)   1        	C99之后或者C++
sizeof(BOOL）  4         win
在需要使用类型长度的时候，不要使用硬编码，直接使用1，2，4这种就是使用硬编码，使用sizeof，比如用sizeof（int）代替4，提高代码的可移植性，（同一串代码的不同平台的移植性）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/10-21/leixing.png&#34;
	width=&#34;941&#34;
	height=&#34;707&#34;
	srcset=&#34;http://localhost:1313/p/10-21/leixing_hu_5f0e16db4cef9a9a.png 480w, http://localhost:1313/p/10-21/leixing_hu_5a8b61253a6ac30f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by lei&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;sizeof计算类型或者变量长度，字节为单位，是操作符，不是函数，在编译阶段确定，而不是运行阶段
决定一串代码是函数还是操作符，看其结果是在编译阶段确定还是在运行阶段确定，sizeof在编译阶段即确定&lt;/p&gt;
&lt;p&gt;各个类型表示的数的范围
最大值和最小值表示：
无符号：
unsigned int max = (unsigned int)-1;//1111 1111 1111 1111
unsigned int min = 0
有符号
int max =  0x7fffffff=0111 1111 1111 1111 0x7f ff ff ff
int min =0x80000000 =  1000 0000 0000 1111,0x80 00 00 00      （除了符号位之外其他的全部为0）&lt;/p&gt;
&lt;p&gt;整数溢出之后发生什么
char(-128*-1) 上溢 1：变成最小值
下溢出1：最大值
举例：有符号 -129-1// -129  -&amp;gt;127        127+1//128 -&amp;gt;-128
无符号  255+1 = 0   0-1=255&lt;/p&gt;
&lt;p&gt;UTC 世界标准时，与GMT（格林尼治时间）&lt;/p&gt;
&lt;h2 id=&#34;类型转换&#34;&gt;类型转换
&lt;/h2&gt;&lt;h1 id=&#34;强制转换&#34;&gt;强制转换
&lt;/h1&gt;&lt;p&gt;类型转换：将一种类型转换为另一种类型，一种类型指针转为另一种类型指针
强制转换：（新类型，写要转换的哪一个量）变量
从小到大：小，指的是字节小，从字节小的转化为字节大的
char c = &amp;lsquo;a&amp;rsquo;
short i = (short)c
int a = (int)i
unsigned int u = (unsigned int)a （有符号数和无符号数也能强制转化）
long b = (long)a
float c = (float)b
double d = (double)c
小到大转换的时候，符号位填充多出的尾数
00110101 &amp;ndash;&amp;gt; 00000000 00110101 &amp;ndash;&amp;gt;
10110100 &amp;ndash;&amp;gt;11111111 10110100 &amp;ndash;&amp;gt;
short s = 0x12
int i = (int) s ..i -&amp;gt;0x00 00 00 12
short s = -0xff ee //-18
int i = (int)s //i -&amp;gt;0xff ff ff ee&lt;/p&gt;
&lt;p&gt;浮点数到整数
int i =(int)3.14 //取整，非四舍五入&lt;/p&gt;
&lt;p&gt;从大到小：
int x = 0x12345678
short y = (short)x
y==0x5678截断，丢弃高位       大字节缩小到小字节&lt;/p&gt;
&lt;h1 id=&#34;自动隐式转换1&#34;&gt;自动（隐式）转换（1）
&lt;/h1&gt;&lt;p&gt;1）若参与运算量的类型不同，则先转换成同一类型，然后进行运算
2）转换按数据长度增加的方向进行，以保证精度不降低。如int型和long型运算时，先把int量转成long型后再进行运算
a.若两种类型的字节数不同，转换成字节数高的一种类型
b.若两种类型的字节数相同，且一种有符号，一种无符号，则转换成无符号类型
3）所有的浮点运算都是以双精度进行的，即使仅含float单精度量运算的表达式，也要先转换成double型，在做运算
4）char型和short型参与运算时，必须先转换成int型
5）再赋值运算中，赋值号两边量数据类型不同时，赋值号右边量的类型将转换为左边量的类型，类型不一致，可以能降低精度
6）算数运算中，加减乘除取余以及符号运算。
不同类型数据必须转换成同一类型的数据才能运算，算数转换的原则为：
a若运算数中有double型或float型，则其他类型数据均转换成该类型进行运算
b若运算数种最长的类型为long型，则其他类型数据转换lang型函数
c若运算数种最长类型为int型，则char型也转换成int型进行运算，算术转换是再运算过程中自动填充而行的
7）函数调用中参数传递时，系统隐式地将实参转换为形参的类型后，赋给形参。char和short会被转换成int，float会被转化为double
8）函数有返回值时，系统将隐式地返回表达式类型转换为返回值类型，赋值给调用函数
无论是强制转换后世自动转换，都只是为了本次运算的需要而对变量的数据长度进行的临时性转换，而不改变数据说明是对该变量定义的类型
float f = 5.34f
int x = (int)f
f虽为强制转为int型，但只在运算中起作用，是临时的，而f本身的类型并不改变&lt;/p&gt;
&lt;p&gt;赋值中的类型转换
当赋值运算符两边的运算对象类型不匹配时，将要发生的类型转换，转换的规则是：把赋值运算符右侧表达式的类型转换为左侧变量的类型
（1）浮点型与整形
将浮点数（单双精度）转换为整数时，将舍弃浮点数的小数部分，只保留整数部分。将整型值赋给浮点型变量，数值不变，只将形式改为浮点形式，即小数点后带若干个0，注意，负值时的类型转换实际上是强制的
（2）单双精度浮点型
由于c语言中的浮点值总是用双精度 表示的，所以float型数据知识在尾部加0延长为double型数据参加运算，然后直接赋值，double型数据转换为float型时，通过截尾数来实验，截断前要进行四舍五入操作
（3）char型与int型
int型数值赋给char型变量时，只保留其最低八位，高位部分舍弃
char型数值赋给int型变量时，一些编译程序不管其值大小都做整数处理，而另一些编译程序在转换时，若char型数据值大于127，就作为负数处理。对使用者来讲，如果原来char型数据取正值，转换后仍然为正值；如果原来char型值可正可负，则转换后也仍然保持原值，只是数据的内部表示形式有所不同
（4）int型与long型
long型数据赋给int型变量时，将低16位值送给int型变量，而将高16位截断舍弃。（这里假定int型占两个字节）将int型数据送给long型变量时，其外部值保持不变，而内部形式有所改变。
（5）无符号整数
将一个unsigned型数据赋给一个占据同样长度存储单元的整形变量时（如：unsigned-&amp;gt;int，unsigned long-&amp;gt;long，unsigned short -&amp;gt;short），原值照赋，内部的存储方式不变，但外部的值却可能改变。
将一个signed整形数据赋给长度相同的unsigned型变量时，内部存储形式不变，但外部表示时总是无符号的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>10-20 笔记</title>
        <link>http://localhost:1313/p/10-20/</link>
        <pubDate>Mon, 20 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/10-20/</guid>
        <description>&lt;img src="http://localhost:1313/p/10-20/bj.jpg" alt="Featured image of post 10-20 笔记" /&gt;&lt;h3 id=&#34;c语言基础&#34;&gt;c语言基础
&lt;/h3&gt;&lt;p&gt;ASCII码，美国标准信息交换代码&lt;/p&gt;
&lt;p&gt;SCII码是单字节编码系统，它使用指定的7位或者8位二进制数组合来表示128或256种可能的字符
标准ASCII码也叫基础ASCII码，使用7位二进制数来表示所有的大写和小写字母，数字0-9，标点符号，以及在美式英语中使用的特殊控制字符
char c= &amp;lsquo;A&amp;rsquo;,//c=65&lt;br&gt;
char ch=&amp;lsquo;0&amp;rsquo;;//ch=48&lt;/p&gt;
&lt;p&gt;UNICODE编码
ASCII编码只能表示有限的字符数，为了能够将世界上所有的字符都纳入编码范围，UNICODE字符编码便产生了，在UNICODE字符编码中，经常采用的是用2个字节或4个字节来表示一个字符，UNICODE编码的具体实现包括UTF-8，UTF-16和UTF-32。其中UTF-8中的字符占用的字节可以从1到4个，而UTF-16占两个字节，UTF-32占4个字节。
unicode编码兼容ASCII编码
&amp;lsquo;0&amp;rsquo;  &amp;lsquo;1&amp;rsquo;被引号括起来，表示1和0的字符，有对应的编码，而0，和1对应的就是整数的值，
如何把一个字符转化成整数：  c - &amp;lsquo;0&amp;rsquo;//     &amp;lsquo;5&amp;rsquo;-&amp;lsquo;0&amp;rsquo;=5      (减0这个字符)
整数转化成字符：    i  + &amp;lsquo;0&amp;rsquo;//       5+&amp;lsquo;0&amp;rsquo;=&amp;lsquo;5&amp;rsquo; （加0这个字符）
大写转小写  char c = &amp;lsquo;M&amp;rsquo;
c + &amp;lsquo;a&amp;rsquo; - &amp;lsquo;A&amp;rsquo;   字母大小写之间转化差32位值，所以加上小a减大A，不直接写32是为了能看懂
char ch=&amp;lsquo;y&amp;rsquo;
ch + &amp;lsquo;A&amp;rsquo;-&amp;lsquo;a&amp;rsquo;    a=97 A=65&lt;/p&gt;
&lt;h1 id=&#34;整形&#34;&gt;整形
&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;   short int   简写为 short
int
long int  简写为 long
long long
_int64
   char也可以看作一种整型 

short a1 = 100
    int a2 = 0x64
    long a3 = 100L

    unsigned short a4 = 100
    unsigned int a5 100
    unsigned long a6 = 100UL

    long long a7 100ll;Linux
    _int64 a8 = 100i64 ;windows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;长度不对，会容易出很多漏洞，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;浮点类型
float//单精度, 4个字节
double//双精度，8个字节
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;float x=3.1415f  如果不写f系统会认为这是一个双精度浮点数
double y = 1.732&lt;/p&gt;
&lt;p&gt;自定义新的类型
typedef int INTl
typedef unsigned int UINT
typedef unsigned short USHORT
typedef char CHAR
typedef unsigned long ULONG
typedef usigned short WORD
typedef unsigned int DWORD
typedef unsigned char BYTE
typedef unsigned int size_t&lt;/p&gt;
&lt;p&gt;数据结构体，列表节点，二次参数
可以用来应对c语言代码中的标准或者平台发生了变化，重新定义可以减少代码的修改量
代码更简单
统一编码风格&lt;/p&gt;
&lt;h3 id=&#34;python&#34;&gt;python
&lt;/h3&gt;&lt;p&gt;学习了字典及其基础语法知识&lt;/p&gt;
</description>
        </item>
        <item>
        <title>10-19 笔记</title>
        <link>http://localhost:1313/p/10-19/</link>
        <pubDate>Sun, 19 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/10-19/</guid>
        <description>&lt;img src="http://localhost:1313/p/10-19/bj.jpg" alt="Featured image of post 10-19 笔记" /&gt;&lt;h3 id=&#34;python基础课&#34;&gt;python基础课
&lt;/h3&gt;&lt;p&gt;序列中有关于字符串，列表，元组的知识总结
补充了一些常用函数&lt;/p&gt;
&lt;h3 id=&#34;c语言基础&#34;&gt;c语言基础
&lt;/h3&gt;&lt;p&gt;##内建型别##
c语言是一个强类型的语言，数据必须明确指定类型，C++还加强了类型安全的检查
程序与数据：程序的任务：处理数据（信息），图片，视频，文本，日志，数据库等。
一个人的年龄，身高，体重，名字，健康状况，性别等数据，对应了不同的类型&lt;/p&gt;
&lt;p&gt;c语言标准，所有的都支持，占字节意为在磁盘中进行存储的时候必须要占这么多空间才能进行存储
字符类型：char/wchar_t    2个字节或者4个字节   char对应    wchar_t对应
整型：short 短暂，2个字节/int 标准，4个字节/long 长整型，winx86 8个字节/longlong 再linux用的多/_int64 win多，8字节
实数单精度：float  4字节
实数双精度：double  8字节
有符号和无符号：signed   有/unsigned 无,(signed)int 默认有/ unsigned int
布尔类型：bool,0/1(true/false) C99 &amp;lt;stdbool.h&amp;gt;  头文件
c语言内部支持的型别&lt;/p&gt;
&lt;p&gt;数据类型的实例
char gender = &amp;lsquo;M&amp;rsquo;;ASCII字符
wchar_t sex = L&amp;rsquo;F&amp;rsquo;;UNICODE字符  此字符一个字符占两个字节，ios和linux占4个字节
char name[16] = &amp;rsquo;tom&amp;rsquo;;   字符组有16个元素
wchar_t nick[16] = L&amp;rsquo;Jcak&amp;rsquo;;&lt;/p&gt;
&lt;p&gt;int age=30;
float weight=79.1f;
double height= 1.80
bool bhealthy= ture;&lt;/p&gt;
&lt;p&gt;内建型别，数据以字节为单位存储在内存中，不同类型的数据，存储占用的内存空间长度不同&lt;/p&gt;
&lt;p&gt;#字符型：char./wchar_t
sizeof(char) = 1 即char类型占1个字节空间       采用ASCII编码，一个字符对应一个字节
sizeof(wchar_t) = 2或者4,字符数与字节数的区别  Unicode编码，一个字符对应多个字节
char c=&amp;lsquo;a&amp;rsquo;// &amp;lsquo;a&amp;rsquo;是字符常量，c是字符变量。常量用单引号包围  &amp;lsquo;&amp;rsquo;&amp;rsquo;-&amp;gt;&amp;rsquo;&#39;&amp;rsquo;  表示字符常量的时候用单引号引起来，单引号也是一个字符，需要用转义字符来表示该引号不是字符
wchar_t wc=L&amp;rsquo;a&amp;rsquo;;
unsigned char/signed char,只写char，由编译器决定是有符号无符号
字符编码：字符在计算机中是通过字符编码（字符的id）的形式存储的，&amp;lsquo;a&amp;rsquo;-&amp;gt;97,&amp;lsquo;A&amp;rsquo;-&amp;gt;65
ASCII码，美国标准信息交换代码
ASCII码是单字节编码系统，它使用指定的7位或者8位二进制数组合来表示128或256种可能的字符&lt;/p&gt;
</description>
        </item>
        <item>
        <title>10-18 笔记</title>
        <link>http://localhost:1313/p/10-18/</link>
        <pubDate>Sat, 18 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/10-18/</guid>
        <description>&lt;img src="http://localhost:1313/p/10-18/tutu.jpg" alt="Featured image of post 10-18 笔记" /&gt;&lt;h3 id=&#34;1018&#34;&gt;10.18
&lt;/h3&gt;&lt;h2 id=&#34;美化博客&#34;&gt;美化博客
&lt;/h2&gt;&lt;p&gt;新增了背景图片，修改了字体，增加遮光罩，部分路径代码优化很差，网页加载变卡&lt;/p&gt;
&lt;h2 id=&#34;python熟练&#34;&gt;python熟练
&lt;/h2&gt;&lt;p&gt;洛谷B2007-B2014的入门编程题，新增语法表达，逻辑优化
如：
￥round(number, ndigits)  四舍五入函数  要舍入的数字和保留的小数位数（ 默认为0）不会强制保留小数
￥f-string 字符串格式化 f&amp;quot;{变量：格式}&amp;quot;   f&amp;rsquo;  {}   {} &amp;rsquo;  引号内相当于字符串，大括号内可以加变量
{} 内可以简洁表达   {:10    :&amp;lt;10    ^10}右对齐，左对齐，居中对齐  {:,.2f      :.1%}千分位加保留2位      保留一位和百分比&lt;/p&gt;
&lt;p&gt;后续继续学习序列和巩固之前所学语法&lt;/p&gt;
&lt;h2 id=&#34;c语言学习&#34;&gt;c语言学习
&lt;/h2&gt;&lt;h1 id=&#34;程序基础&#34;&gt;程序基础
&lt;/h1&gt;&lt;p&gt;程序的编译和链接&lt;br&gt;
vc&lt;/p&gt;
&lt;p&gt;预处理 a.c    编译 a.i     汇编 a.s       链接 a.o(a.obj)     &amp;gt;  a.exe
c      &amp;gt;       i     &amp;gt;    s     &amp;gt;     o    &amp;gt;   exe&lt;/p&gt;
&lt;p&gt;多个c会编辑成多个obj，然后与lib一起链接成exe。pe格式  (可执行文件)&lt;br&gt;
pe格式存放了程序执行的代码啊，数据，资源        是一种规范和标准&lt;/p&gt;
&lt;p&gt;win:. exe/.dll/.sys =&amp;gt; pe &lt;br&gt;
Linux: elf&lt;br&gt;
病毒分析逆向&lt;/p&gt;
&lt;p&gt;dos ‘MZ’   e_magic MZ 开头  0X5a4d&lt;br&gt;
dos stub         主要起兼容作用&lt;/p&gt;
&lt;p&gt;e_lfanew 指向 pe文件头
PE\0\0: 0x50 0x45 00 00&lt;/p&gt;
&lt;p&gt;块表 记录每一个块的位置&lt;/p&gt;
&lt;p&gt;块 存放着可执行代码&lt;/p&gt;
&lt;p&gt;调试信息&lt;/p&gt;
&lt;p&gt;section 节，块，段
eop  入口点，第一条指令所在地址
oep  原入口点，壳里面的概念
epo  入口模糊  病毒概念  病毒感染了程序，模糊了入口点
imageBase:0x4000000   exe从磁盘加载到内存中，有一个基地值，不修改的话是固定的（）编译可修改
VA  加载到内存中，pe文件的每一条指令，数据，变量的虚拟地址
RVA 相对虚拟地址，相对于imagebase
VOFFSET  每一节的起始的虚拟地址减去imagebase得到的值  内存中起始地址截取imagebase
ROFFSET  每一节的起始地址减去文件的首地址得到的偏移   磁盘中起始地址减去文件的首地址&lt;/p&gt;
&lt;p&gt;peid/petool     pe petool 查壳查地址
notepad++/winhex&lt;/p&gt;
&lt;p&gt;extrypoint eop&lt;br&gt;
ep section 所在的节 text 存放代码&lt;/p&gt;
&lt;p&gt;程序，是指令和数据的有序集合，本身没有任何运行的含义，静态概念&lt;br&gt;
存放在磁盘上的exe程序叫做映像文件 imagefile&lt;/p&gt;
&lt;p&gt;进程是程序在处理机上的一次执行过程，他是一个动态的概念，拥有一个完整的生命周期&lt;br&gt;
进程的是指是程序在系统中的一次执行过程，进程是动态产生，动态消亡的&lt;br&gt;
一个程序在不同的数据集里就构成不同的进程&lt;br&gt;
不同的程序可以启动不同数量的进程&lt;br&gt;
程序在运行的时候就有一个pid标识&lt;br&gt;
进程的三个状态：&lt;br&gt;
1，就绪状态&lt;br&gt;
已经获得除了处理器的所需资源，等待分配处理器&lt;br&gt;
2，运行状态&lt;br&gt;
占用cpu资源，&lt;br&gt;
3，阻塞状态&lt;br&gt;
等待某种条件，在条件满足前无法继续执行&lt;/p&gt;
&lt;p&gt;线程：为了提高系统并发的度。&lt;br&gt;
一个程序至少有一个进程&lt;br&gt;
一个进程至少有一个线程，进程是资源分配的基本单元，线程的调度的基本单元&lt;/p&gt;
&lt;p&gt;冯诺依曼体系   cpu(算术逻辑单元和浮点数逻辑单元)  寄存器   内存(RAM)   磁盘&lt;/p&gt;
&lt;p&gt;cpu 》计算 》计算器 》 储存&lt;br&gt;
系统总线，控制总线，地址总线，数据总线  连接cpu和内存，通过线路传输连接计算&lt;/p&gt;
&lt;p&gt;cpu：多核时代，一个cpu上有多个核，每一个核就是一个processor，操作系统的视角中一个核就是一个逻辑处理器&lt;/p&gt;
&lt;p&gt;系统内存布局&lt;br&gt;
分为俩个部分&lt;/p&gt;
&lt;p&gt;user space    应用程序运行空间                         2GB内核空间 0xffffffff&lt;/p&gt;
&lt;p&gt;kernel space   内核空间，操作系统的运行空间            0x7fffffff   64kb非法区域&lt;br&gt;
最下层是硬件                           0x7fff0000 &lt;br&gt;
进程空间（私有的，每一个进程  之间的内存）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                                    64kb null空间  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;应用层程序R3&lt;br&gt;
内核层R0（最高权限）&lt;/p&gt;
&lt;p&gt;x86支持32位寻址，pae技术可以扩大内存空间&lt;br&gt;
2^32=4GB  32位系统，四个字节&lt;/p&gt;
&lt;p&gt;x64内存理论上支持2^64的寻址空间，目前一般只支持到40多位&lt;/p&gt;
&lt;h1 id=&#34;整数&#34;&gt;整数
&lt;/h1&gt;&lt;p&gt;##整数##&lt;br&gt;
#进制转换&lt;br&gt;
十进制，二进制，十六进制，八进制&lt;br&gt;
1.c：&lt;br&gt;
十六进制：0x71ef（0x开头 A(10)B(11)C(12)D(13)E(14)F(15)）&lt;br&gt;
八进制：0127（0-7）&lt;br&gt;
二进制：101101(c里面没有单独的二进制表示方法)&lt;br&gt;
十进制：100&lt;br&gt;
2.进制只是整数值的表现形式，&lt;br&gt;
值123：123/0x7b/0173/01111011&lt;br&gt;
3.汇编语言：&lt;br&gt;
十六进制：1aH&lt;br&gt;
八进制：17O&lt;br&gt;
十进制：12D&lt;br&gt;
二级制：110B&lt;br&gt;
4.进制转换计算&lt;br&gt;
x进制转换10进制：&lt;br&gt;
A(n)A(n-1)&amp;hellip;..=A(n)*x^(n-1)&amp;hellip;&lt;br&gt;
十进制（A）转换x进制：&lt;br&gt;
A除以x取余数，再取商除以x取余数，直到商为0，再把所有余数逆序.&lt;br&gt;
有小数的数，十进制转二进制，小数点前后分开转换&lt;br&gt;
22.8125   00010110.1101&lt;br&gt;
对2进制分组，将每一个二进制专门转化为十六进制，每四位分一组，便于计算二进制转十六进制
整  数：1，2，4，8字节
浮点数：4个或者8个字节
5.特性
十六进制的特性
根据十六进制转化为二进制的方法，可以得出：在十六进制中，1个数字占四位，2个数字为一个字节
可以直接观察这个数在内存中每个字节的内容
8位二进制为一个字节，十六进制中每两个数字是一个字节
#整数编码
1.计算机存储数据的bit（位）与byte（字节）
bit：位，小b，最小单位
byte：字节，大B，1Byte=8bit
网路带宽使用bit计算的
1个bit只能存储两个信息：0，1
1个Byte能存储2^8个信息：【-128，127】，【0，255】8位二进制，两位十六进制
2个Byte，4个Byte，8个Byte
数据存储位置，寄存器，内存，磁盘  一般按byte来计算存储单位
2.整数的正负表示&lt;br&gt;
有符号数：最高位做符号位这种表示的整数叫做有符号数（有正负之分）&lt;br&gt;
最高位做符号位，1表示负数，0表示正数&lt;br&gt;
如果用1个字节来表示整数，那么：&lt;br&gt;
10110110:负数&lt;br&gt;
01001011:正数&lt;br&gt;
无符号数：无负数，表示0和正整数，最高位无需表示正负，参与数值运算。&lt;br&gt;
一个字节的整数&lt;br&gt;
有符号：【-128，127】&lt;br&gt;
无符号：【0，255】&lt;br&gt;
3.整数的编码&lt;br&gt;
（最终采取了补码）整数是按照二进制储存的，二进制需要进行特定的编码规则存储：原码，反码，补码&lt;br&gt;
原码：在数值前面增加了一位符号位（即最高位位符号位），该位为0表示整数，该位为1表示负数，其余位标识数值的大小。&lt;br&gt;
以一个byte作为整数存储长度为例子：&lt;br&gt;
1：  00000001&lt;br&gt;
-1：  10000001&lt;br&gt;
那么1-1=1+（-1）=00000001+10000001=10000010=-2错误，符号位无法参加运算&lt;/p&gt;
&lt;p&gt;反码：正整数的反码就是其自身，而负整数的反码可以通过对其绝对值逐位求反来求得。&lt;br&gt;
以一个byte作为整数存储长度为例子：&lt;br&gt;
1：  00000001&lt;br&gt;
-1：  11111110&lt;br&gt;
那么1-1=1+（-1）=00000001+11111110=11111111=0错误，反码的问题在于+0和-0的情况，人常识的计算概念中0是没有正负之分的 &lt;br&gt;
补码：整数的补码为它本身，负数的补码就是它的绝对值求反加1，0的补码就是0 &lt;br&gt;
计算机采用补码储存整数&lt;br&gt;
以一个byte作为整数存储长度为例子：&lt;br&gt;
1：  00000001&lt;br&gt;
-1：  11111111&lt;br&gt;
100：  01100100&lt;br&gt;
-100：  10011100   （取反加1等于其绝对值）&lt;br&gt;
47：  00101111&lt;br&gt;
-47：  11010001&lt;br&gt;
-128：  10000000&lt;br&gt;
127：  01111111&lt;br&gt;
两个字节的100：00000000 01100100&lt;br&gt;
两个字节的-100：11111111 10011100&lt;br&gt;
两个字节的-1  ：11111111 11111111&lt;br&gt;
一个字节的补码扩充到两个字节，四个字节：&lt;br&gt;
正数：零扩充&lt;br&gt;
负数：一扩充&lt;br&gt;
用最高位的符号位去扩充&lt;br&gt;
4.整数的存储方式&lt;br&gt;
0x 12 34 56 78  左边是高位  右边是地位，设计的逻辑顺序&lt;br&gt;
内存存放，从左往右，由低到高&lt;br&gt;
低位优先-》低位存放在低地址 ：little-endian&lt;br&gt;
高位优先-》高位存放在低地址 ：big-endian&lt;br&gt;
x86系统，低位优先系统                     同一种东西的不同存储方式&lt;br&gt;
0x 00 00 00 01&lt;br&gt;
低位优先： 01 00 00 00&lt;br&gt;
高位优先： 00 00 00 01&lt;br&gt;
htons()    主机字节序到网络字节序转换&lt;br&gt;
htohs()  网络字节序到主机字节序转换&lt;br&gt;
网络字节序是高位优先的&lt;/p&gt;
</description>
        </item>
        <item>
        <title>第一周总结</title>
        <link>http://localhost:1313/p/first-week/</link>
        <pubDate>Sun, 12 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/first-week/</guid>
        <description>&lt;img src="http://localhost:1313/p/first-week/gui.png" alt="Featured image of post 第一周总结" /&gt;&lt;h1 id=&#34;第一周学习总结未完&#34;&gt;第一周学习总结（未完）
&lt;/h1&gt;&lt;p&gt;首先是在ctfplus做的题&lt;br&gt;
做了一部分misc和一部分re的题&lt;br&gt;
先说re&lt;br&gt;
有两道sign题&lt;br&gt;
sign1 在ida中反编译在代码中直接能看到flag&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/sign1.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/sign1_hu_37601ce965eb36ad.jpg 480w, http://localhost:1313/p/first-week/sign1_hu_a84a24b916e6dc2b.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by sign1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;br&gt;
sign2 根据运行提示和代码分析，flag应该是通过ROT47方式加密的&lt;br&gt;
ROT47：凯撒加密变种，通过映射ASCII 字符集进行移位加密。可以将数字，字母，符号全部混合互换&lt;br&gt;
加密解密算法完全相同&lt;br&gt;
此题已知flag开头为&amp;quot;0xGame&amp;quot;,将问题喂给ai，通过python代码暴力破解可以得到答案&lt;br&gt;
不过此题中还进行了一个变换&lt;br&gt;
其中decrypt是一个解密函数，并不是常规rot47解密，此题是一个rot47的变种&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/sign2.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/sign2_hu_cd381d4745b5aa3a.jpg 480w, http://localhost:1313/p/first-week/sign2_hu_810c538bab573e46.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by sing2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一道BaseUPX的题&lt;br&gt;
用软件检查exe发现是UPX壳，然后脱壳之后再查看反编译代码&lt;br&gt;
根据代码中base64_encode的提示，找到base64的编码，再利用ai解码&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/UPX.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/UPX_hu_3d842f38836e3492.jpg 480w, http://localhost:1313/p/first-week/UPX_hu_8beec0cfabdf313.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by upx&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一道睡觉zzz的题&lt;br&gt;
此题的核心是sha-256，ASCII字符，长度验证，%8x格式说明符&lt;br&gt;
根据代码提示，format error和wrong的区别，先检查格式问题，再排查其他&lt;br&gt;
然后是sscanf(s1, &amp;ldquo;0xGame{%8x%8x%8x%8x}&amp;rdquo;, &amp;amp;x1, &amp;amp;x2, &amp;amp;x3, &amp;amp;x4)这一段说明是4个8位十六进制数&lt;br&gt;
SHA=256哈希无法反推出原始数据&lt;br&gt;
最后就是编写代码使得4个十六进制数满足代码中所给出的方程，导入ai可得&lt;br&gt;
但本题还有一个问题，已在程序中获得正确提示的答案提交不对&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/zzz.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/zzz_hu_de28aee1690e7fd8.jpg 480w, http://localhost:1313/p/first-week/zzz_hu_52274f607b335563.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by zzz&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt; &lt;img src=&#34;http://localhost:1313/p/first-week/zzz1.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/zzz1_hu_b246fa45b4e766be.jpg 480w, http://localhost:1313/p/first-week/zzz1_hu_9e672309b89189c0.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by zzz1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一道简单异或题&lt;br&gt;
找到str函数对应代码，导入ai进行编译可得&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/xor.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/xor_hu_16637695bcc5f778.jpg 480w, http://localhost:1313/p/first-week/xor_hu_c3ce590a086b5aed.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by xor&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一道dydebug复杂加密问题，四种加密方式，也是利用ai解出，具体图片未保存&lt;/p&gt;
&lt;p&gt;然后是misc方向的题目&lt;br&gt;
一道base64编码和凯撒加密的题目&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/kaisa.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/kaisa_hu_51e2bf8e93aa2725.jpg 480w, http://localhost:1313/p/first-week/kaisa_hu_c823bf04f804aa53.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by kaisa&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;一道图片lsb隐写题，利用stegsolve看RGB编码解出&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/zoo.jpg&#34;
	width=&#34;1920&#34;
	height=&#34;1440&#34;
	srcset=&#34;http://localhost:1313/p/first-week/zoo_hu_bd49ae42df560854.jpg 480w, http://localhost:1313/p/first-week/zoo_hu_f229b0643e4a61b.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by zoo&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;最后一道是docx，利用010查询编码发现是504b0304，改格式解压得出&lt;/p&gt;
&lt;p&gt;接着是学习的linux基本命令，询问ai之后在系统中试过抄写命令&lt;br&gt;
&lt;img src=&#34;http://localhost:1313/p/first-week/linux1.jpg&#34;
	width=&#34;1440&#34;
	height=&#34;1920&#34;
	srcset=&#34;http://localhost:1313/p/first-week/linux1_hu_23ae6ac9259b6100.jpg 480w, http://localhost:1313/p/first-week/linux1_hu_cf61ba3c9c66e9.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by linux&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;  &lt;img src=&#34;http://localhost:1313/p/first-week/linux2.jpg&#34;
	width=&#34;1440&#34;
	height=&#34;1920&#34;
	srcset=&#34;http://localhost:1313/p/first-week/linux2_hu_afa2093206e9b63.jpg 480w, http://localhost:1313/p/first-week/linux2_hu_8e5fbe76e0d9d8a9.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by linux1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;  &lt;img src=&#34;http://localhost:1313/p/first-week/linux3.jpg&#34;
	width=&#34;1536&#34;
	height=&#34;2048&#34;
	srcset=&#34;http://localhost:1313/p/first-week/linux3_hu_b7282d976f27a7ff.jpg 480w, http://localhost:1313/p/first-week/linux3_hu_83af5ed57161d449.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by linux2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Emoji Support</title>
        <link>http://localhost:1313/p/emoji-support/</link>
        <pubDate>Wed, 08 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/emoji-support/</guid>
        <description>&lt;img src="http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash.jpg" alt="Featured image of post Emoji Support" /&gt;&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/functions/emojify/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;emojify&lt;/code&gt;&lt;/a&gt; function can be called directly in templates or &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/templates/shortcode-templates/#inline-shortcodes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Inline Shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable emoji globally, set &lt;code&gt;enableEmoji&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your site&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/configuration/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;configuration&lt;/a&gt; and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙈&lt;/span&gt; &lt;code&gt;:see_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙉&lt;/span&gt; &lt;code&gt;:hear_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙊&lt;/span&gt; &lt;code&gt;:speak_no_evil:&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;http://www.emoji-cheat-sheet.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Emoji cheat sheet&lt;/a&gt; is a useful reference for emoji shorthand codes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.emoji {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>人生总有第一次</title>
        <link>http://localhost:1313/p/first-word/</link>
        <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/first-word/</guid>
        <description>&lt;img src="http://localhost:1313/p/first-word/121.jpg" alt="Featured image of post 人生总有第一次" /&gt;&lt;h1 id=&#34;第一篇文章&#34;&gt;第一篇文章
&lt;/h1&gt;&lt;h2 id=&#34;介绍&#34;&gt;介绍
&lt;/h2&gt;&lt;p&gt;我已出仓，感觉良好。&lt;br&gt;
刚看啥也不是，点开一看更是啥也不是&lt;br&gt;
在第一篇文章里面做一些尝试&lt;/p&gt;
&lt;h2 id=&#34;引用&#34;&gt;引用
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我曾经爱过你，爱情，也许；&lt;br&gt;
在我的心灵里还没有完全消亡；&lt;br&gt;
但愿它不会再打扰你；&lt;br&gt;
我也不想再使你难过悲伤；&lt;br&gt;
我曾经默默无语，毫无指望地爱过你；&lt;br&gt;
我既忍受着羞怯，又忍受着嫉妒的折磨；&lt;br&gt;
我曾经那样真诚，那样温柔地爱过你；&lt;br&gt;
但愿上帝保佑你，它会比我更爱你。&lt;br&gt;
&amp;mdash;普希金&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;莫言在《晚熟的人》里这样写道：&lt;br&gt;
“烟火人间，各有遗憾。&lt;br&gt;
想过安稳日子的女人，却嫁给了挣不来qian的男人；&lt;br&gt;
想过安稳日子的男人，却娶了爱败家的女人；&lt;br&gt;
做得一手好菜的女人，等不到回家吃饭的男人；&lt;br&gt;
经常回家吃饭的男人，偏偏娶了不会做饭的女人。&lt;br&gt;
山山而川，不过尔尔。在喜欢你的人那里去热爱生活，在不喜欢你的人那里去看清世界，就这么简单。”&lt;/p&gt;
&lt;p&gt;活着活着你就会明白，这个世界是守恒的。&lt;br&gt;
很多婚姻好的人，事业不行；&lt;br&gt;
事业好的人，婚姻不行；&lt;br&gt;
事业婚姻都好的人，可能身体不好。&lt;br&gt;
大部分有成就的人，大多是六亲无靠，六亲无靠大概就是他们用来交换成功的代价，所以对于很多事不必太执着。&lt;br&gt;
枕边人成不了心上人，心上人也成不了枕边人。枕边人给不了爱，心上人给不了家；&lt;br&gt;
最终，枕边人守着过了一辈子，心上人待在心里一辈子。&lt;br&gt;
我们本不善言辞，为了生活，却不得不忙于交际；&lt;br&gt;
我们本喜欢独处，为了生活，却不得不四处奔波。&lt;br&gt;
在无人问津的地方，拿尊严换qian；&lt;br&gt;
在人声鼎沸的地方，拿qian换取尊严。&lt;br&gt;
有工作的地方没有家，有家的地方没有工作。&lt;br&gt;
他乡容不下灵魂，故乡安不了肉身。&lt;br&gt;
上苍不会让所有幸福集中到某个人身上。&lt;br&gt;
得到了爱情未必拥有金qian，拥有金qian未必得到快乐；&lt;br&gt;
得到快乐未必拥有健康，拥有健康未必一切都会如愿以偿。&lt;br&gt;
你得到了这个，还想要那个，但不可能所有的好处你都能得到。你不可能同时拥有春花和秋月，也不可能同时拥有硕果和繁花。&lt;br&gt;
人生最忌讳的就是过于圆满，不信你看看身边的人。&lt;br&gt;
有人婚姻不好，但子女很优秀；&lt;br&gt;
有人婚姻很好，但身体不太好；&lt;br&gt;
有人事业很顺，但家庭不和睦；&lt;br&gt;
有人家庭和睦，日子却过得很清贫。&lt;br&gt;
人生哪能都如意，万事只能半称心。美满的婚姻是由瞎子女人和聋子男人缔成，我们都是和对方的优点谈恋爱，却和他们的缺点生活在一起，天下没有十全十美的男女。婚姻不是争输赢，半睁眼半闭眼过生活，少用放大镜看对方，否则连上帝身上都能挑出毛病。&lt;br&gt;
时光煮雨，岁月缝花。这烟火人间，事事遗憾，但事事也值得！&lt;/p&gt;
&lt;h2 id=&#34;图片&#34;&gt;图片
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/p/first-word/fuxuan.jpg&#34;
	width=&#34;1200&#34;
	height=&#34;750&#34;
	srcset=&#34;http://localhost:1313/p/first-word/fuxuan_hu_3bf6b80930d5ab3d.jpg 480w, http://localhost:1313/p/first-word/fuxuan_hu_e8b8bdf65a7cde72.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Photo by fuxuan&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt; &lt;img src=&#34;http://localhost:1313/p/first-word/ailin.jpg&#34;
	width=&#34;481&#34;
	height=&#34;680&#34;
	srcset=&#34;http://localhost:1313/p/first-word/ailin_hu_a69a2b64433ba9d4.jpg 480w, http://localhost:1313/p/first-word/ailin_hu_853333971f1ba1fe.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;photo by ailin&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;169px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;注意
&lt;/h2&gt;&lt;p&gt;+++       &amp;mdash;
+++   和  &amp;mdash; 是两种语法&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Archives</title>
        <link>http://localhost:1313/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>Links</title>
        <link>http://localhost:1313/links/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/links/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Search</title>
        <link>http://localhost:1313/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/search/</guid>
        <description></description>
        </item>
        <item>
        <title>关于</title>
        <link>http://localhost:1313/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/%E5%85%B3%E4%BA%8E/</guid>
        <description>&lt;p&gt;This is a test page for i18n support.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
